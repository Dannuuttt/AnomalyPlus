local gt = game.translate_string
local ini_box = ini_file("items\\settings\\achievement_box_items.ltx")

local grouped_items_t = { junk={}, food={}, medical={}, repair={}, ammo={}, artefact={}, weapon={}, armor={}, helmet={} }

function collect_and_group_items()
	-- junk/food/artefact
	ini_sys:section_for_each(function(sec)
		local kind = ini_sys:r_string_ex(sec, "kind")
		local cost = ini_sys:r_float_ex(sec, "cost")
		local quest_item = ini_sys:r_bool_ex(sec, "quest_item")
		if kind and (not quest_item) and cost and cost > 10 then
			-- junk
			if kind == "i_misc" and sec ~= "meinkampf" then
				grouped_items_t["junk"][sec] = cost
			-- food
			elseif kind == "i_food" or kind == "i_drink" or kind == "i_mutant_cooked" then
				grouped_items_t["food"][sec] = cost
			-- artefact (junk) and attachments
			elseif kind == "i_arty_junk" or kind == "i_attach" then
				grouped_items_t["artefact"][sec] = cost
			-- artefact (normal in container)
			elseif kind == "i_arty" and ini_sys:section_exist(sec .. "_lead_box") then
				grouped_items_t["artefact"][sec .. "_lead_box"] = cost
			end
		end
	end)

	-- medical
	local medical_ar = {}
	medical_ar[#medical_ar + 1] = ui_debug_main.get_spawn_table("Items (Medical)")
	fill_group(medical_ar, "medical")

	-- repair
	local repair_ar = {}
	repair_ar[#repair_ar + 1] = ui_debug_main.get_spawn_table("Items (Repair)")
	fill_group(repair_ar, "repair")

	-- ammo
	local ammo_ar = {}
	ammo_ar[#ammo_ar + 1] = ui_debug_main.get_spawn_table("Weapons (Ammo)")
	fill_group(ammo_ar, "ammo")

	-- weapon
	local wpns_ar = {}
	wpns_ar[#wpns_ar + 1] = ui_debug_main.get_spawn_table("Weapons (Pistol)")
	wpns_ar[#wpns_ar + 1] = ui_debug_main.get_spawn_table("Weapons (Shotgun)")
	wpns_ar[#wpns_ar + 1] = ui_debug_main.get_spawn_table("Weapons (SMG)")
	wpns_ar[#wpns_ar + 1] = ui_debug_main.get_spawn_table("Weapons (Rifle)")
	wpns_ar[#wpns_ar + 1] = ui_debug_main.get_spawn_table("Weapons (Sniper)")
	wpns_ar[#wpns_ar + 1] = ui_debug_main.get_spawn_table("Weapons (Explosive)")
	wpns_ar[#wpns_ar + 1] = ui_debug_main.get_spawn_table("Weapons (Melee)")
	fill_group(wpns_ar, "weapon")

	-- armor
	local armors_ar = {}
	armors_ar[#armors_ar + 1] = ui_debug_main.get_spawn_table("Outfits (Light)")
	armors_ar[#armors_ar + 1] = ui_debug_main.get_spawn_table("Outfits (Medium)")
	armors_ar[#armors_ar + 1] = ui_debug_main.get_spawn_table("Outfits (Heavy)")
	fill_group(armors_ar, "armor")

	-- helmet
	local helmets_ar = {}
	helmets_ar[#helmets_ar + 1] = ui_debug_main.get_spawn_table("Helmets")
	fill_group(helmets_ar, "helmet")
end

function fill_group(ar, group)
	for i = 1, #ar do
		for j = 1, #ar[i] do
			local sec = ar[i][j]
			local quest_item = ini_sys:r_bool_ex(sec, "quest_item")
			local cost = ini_sys:r_float_ex(sec, "cost")
			if (not quest_item) and (not string.find(sec, "achievement_box")) and cost and cost > 10 then
				grouped_items_t[group][sec] = cost
			end
		end
	end
end

function get_box_items(box_tier)
	local total_cost
	local types_t = {}

	-- get all item types for this box tier
	local n = ini_box:line_count(tostring(box_tier))
	for i = 0, n - 1 do
		local _, typ, value = ini_box:r_line_ex(tostring(box_tier), i, "", "")
		if typ == "total_cost" then
			total_cost = tonumber(value)
		elseif (not types_t[typ]) then
			types_t[typ] = tonumber(value)
		end
	end

	local give_items_ar = {}

	-- pick random items
	for i = 1, 50 do
		for typ, chance in pairs(types_t) do

			-- check random chance and if group from ltx exists in our list
			if math.random() <= chance and grouped_items_t[typ] then

				-- pick random item section from this group if their cost is less than total_cost
				for j = 1, 20 do
					local sec = random_key_table(grouped_items_t[typ])
					-- safety checks against some weird addon items
					local inv_name = ini_sys:r_string_ex(sec, "inv_name")
					local wg_patch = not (string.find(sec, "wg_") and string.find(sec, "_base"))
					----------------------------------------
					local cost = grouped_items_t[typ][sec]
					if inv_name and cost <= total_cost and wg_patch then
						give_items_ar[#give_items_ar + 1] = sec
						total_cost = total_cost - cost
						break
					end
				end

			end
		end
	end

	return give_items_ar
end

function use_package(obj)
	local box_tier = ini_sys:r_float_ex(obj:section(), "tier")
	local items_ar = get_box_items(box_tier)

	-- give items and build string
	local str = gt("st_achieve_box_open")
	for i = 1, #items_ar do
		local inv_name = ini_sys:r_string_ex(items_ar[i], "inv_name")
		str = str .. gt(inv_name) .. ", "
		alife_create_item(items_ar[i], db.actor)
	end

	-- give message
	str = string.sub(str, 1, -3) 		-- remove last comma
	news_manager.send_tip(db.actor, str, 0, nil, 15000)

	-- release box
	alife_release(obj)
end

build_desc_header_base = ui_item.build_desc_header
function ui_item.build_desc_header(obj, sec, str)
	str = str or gt(ini_sys:r_string_ex(sec, "description"))
	if (not str) then return "" end

	if sec and (not string.find(sec, "achievement_box")) then
		return build_desc_header_base(obj, sec, str)
	end

	local add_str = gt("st_achieve_box_descr") .. "\\n"
	local tier = ini_sys:r_float_ex(sec, "tier")
	local purple_clr = utils_xml.get_color("d_purple")
	local def_clr = utils_xml.get_color("ui_gray_1")

	local n = ini_box:line_count(tostring(tier))
	for i = 0, n - 1 do
		local _, typ, value = ini_box:r_line_ex(tostring(tier), i, "", "")
		if typ ~= "total_cost" then
			add_str = add_str .. "   " .. purple_clr .. gt("st_achieve_circle") .. def_clr .. " " .. gt("st_achieve_box_type_" .. typ) .. "\\n"
		end
	end

	return build_desc_header_base(obj, sec, str) .. "\\n \\n" .. add_str
end

function on_game_start()
	RegisterScriptCallback("actor_on_first_update", collect_and_group_items)
end