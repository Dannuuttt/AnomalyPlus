function ui_itm_details.UIItemSheet:Reset(obj)
	
	local xml = self.xml
	
	local id = obj:id()
	local sec = ini_sys:r_string_ex(obj:section(),"parent_section") or obj:section()
	local is_wep = IsWeapon(obj) and (not IsItem("fake_ammo_wpn",sec))
	
	local class = ini_sys:r_string_ex(sec,"class")
	--printf("-Item [%s] - class: %s - clsid: %s", sec, class, obj:clsid())
	
	-- Reset
	self.scroll:Clear()
	empty_table(self.CC)

	-- Cap Main
	local name = ui_item.get_sec_name(sec)
	self.cap:SetText(name)
	
-- Info
	-- Cap
	self:AddText(xml, "text_b_l", 0, game.translate_string("st_ui_info")) 
	-- Icon
	self:AddIcon(xml, "ico", 50, obj) 
	-- Wight
	self:AddSpec(xml, "text_s_l", 0, "ui_total_weight", round_100(obj:weight()), self.clr_o, self.clr_2, nil, "st_kg") 
	-- Description
	self:AddText(xml, "text_s_l", 0, ui_item.get_obj_desc(obj)) 
	
	-- Stats
	local stats = utils_ui.get_stats_table(sec) 
	if stats then
		for stat, gr in spairs(stats, utils_ui.sort_by_index) do
			--printf("-stat %s is here for [%s]", stat, sec)
			self:AddStat(xml, nil, 0, obj, stat, gr)
		end
	end
	self:AddLine(xml, 0)
	
-- Weapon: scopes, silencer, grenade launcher
	if is_wep then
	
		-- Ammo
		local ammo_list = utils_item.get_ammo(sec, id)
		if is_not_empty(ammo_list) then
			local t = {}
			for i=1,#ammo_list do
				if (not _NO_DAMAGED_AMMO) or (_NO_DAMAGED_AMMO and (not string.find(ammo_list[i],"verybad"))) then
					if ammo_list[i] ~= "ammo_12x70_buck_self" then
						t[#t+1] = ammo_list[i]
					end
				end
			end
			self:AddText(xml, "text_b_l", 0, game.translate_string("ui_ammo_types")) 
			self.CC["ammo"] = self:AddContainer(xml, "cont", 0, t)
			self:AddLine(xml, 0)
		end
		
		-- Scopes
		local scopes = parse_list(ini_sys, sec, "scopes")
		if scopes and #scopes > 0 then
			self:AddText(xml, "text_b_l", 0, game.translate_string("st_ui_scopes")) 
			self.CC["scope"] = self:AddContainer(xml, "cont", 0, scopes)
			self:AddLine(xml, 0)
		end
		
		-- Silencers
		local silencer = utils_item.get_param(sec, id, "silencer_name", "string")
		if silencer and (obj:weapon_silencer_status() == 2) then
			self:AddText(xml, "text_b_l", 0, game.translate_string("st_ui_silencer")) 
			self.CC["sil"] = self:AddContainer(xml, "cont", 0, {silencer})
			self:AddLine(xml, 0)
		end
		
		-- Grenade Launchers
		local grenade = utils_item.get_param(sec, id, "grenade_launcher_name", "string")
		if grenade and (obj:weapon_grenadelauncher_status() == 2) then
			self:AddText(xml, "text_b_l", 0, game.translate_string("st_ui_grenade_launcher")) 
			self.CC["gl"] = self:AddContainer(xml, "cont", 0, {grenade})
			self:AddLine(xml, 0)
		end
	end
	
-- Parts
	local parts = item_parts.get_parts_con(obj, nil, true)
	if parts then
		local t,t_con = {},{}
		for k,v in pairs(parts) do
			if (k ~= sec) then
				t[#t+1] = k
				t_con[#t_con+1] = v
			end
		end
		self:AddText(xml, "text_b_l", 0, game.translate_string("st_ui_awr_parts_list")) 
		self.CC["part"] = self:AddContainer(xml, "cont", 0, t, t_con)
		local fnt = GetFontSmall()
		for idx,ci in pairs(self.CC["part"].cell) do
			if ci:IsShown() then
				local con = utils_item.get_cond_static(ci.flags.info)
				local clr = utils_xml.get_color_con(ci.flags.info, true)
				-- Edited by Sota
--				ci:Add_CustomText( con, nil, nil, clr, fnt)
				ci:Add_CustomText( con, 0, 0, clr, fnt)
			end
		end
		self:AddLine(xml, 0)
	end
	
-- Repair
	local repair_type = ini_sys:r_string_ex(sec,"repair_type")
	if repair_type then
		
		-- Repair kits
		local repair_kits = {}
		for k,v in pairs(GetItemList("repair")) do
			if v[repair_type] then
				repair_kits[#repair_kits + 1] = k
			end
		end
		if (#repair_kits > 0) then
			self:AddText(xml, "text_b_l", 0, game.translate_string("st_ui_repair_kit_list")) 
			self.CC["repair"] = self:AddContainer(xml, "cont", 0, repair_kits)
			self:AddLine(xml, 0)
		end
		
		-- Workshop kits
		local workshop_kits
		for k,v in pairs(GetItemList("workshop")) do
			if v[repair_type] then
				workshop_kits = k
				break
			end
		end
		if workshop_kits then
			self:AddText(xml, "text_b_l", 0, game.translate_string("st_ui_workshop_kit_list")) 
			self.CC["workshop"] = self:AddContainer(xml, "cont", 0, {workshop_kits})
			self:AddLine(xml, 0)
		end
	end
	
-- Disassembly
	local disassemble_list = parse_list(itms_manager.ini_parts,"nor_parts_list",sec)
	if disassemble_list and (#disassemble_list > 0) and (kind ~= "i_quest") then
		self:AddText(xml, "text_b_l", 0, game.translate_string("st_ui_disassemly_list")) 
		self.CC["diss"] = self:AddContainer(xml, "cont", 0, disassemble_list)
		self:AddLine(xml, 0)
	end
	
-- Supported repair material
	local repair_parts = parse_list(ini_sys, sec, "repair_parts_sections")
	if repair_parts and (#repair_parts > 0) then
		self:AddText(xml, "text_b_l", 0, game.translate_string("st_ui_repair_parts_include")) 
		self.CC["support"] = self:AddContainer(xml, "cont", 0, repair_parts)
		self:AddLine(xml, 0)
	end
	
-- upgrades
	self.scroll_upgr:Show(false)
	self.upgr = utils_item.get_upgrades_tree(sec, true)
	if self.upgr and is_not_empty(self.upgr) then
		self:AddText(xml, "text_b_l", 0, game.translate_string("st_ui_upgrade_list")) 
		self:AddUpgrades(xml, self.upgr, obj)
		self:AddLine(xml, 0)
	end
	
	--self:AddSpace(xml, 0, 30)
end
